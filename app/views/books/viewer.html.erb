<!DOCTYPE html>
<html>
  <head>
    <title><%= @book.title %> - PDF Reader</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
    <style>
      body {
        margin: 0;
        padding: 0;
        background: #2c3e50;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      }
      
      .pdf-viewer {
        display: flex;
        height: 100vh;
      }
      
      .sidebar {
        width: 300px;
        background: white;
        border-right: 1px solid #e5e7eb;
        display: flex;
        flex-direction: column;
      }
      
      .sidebar-header {
        padding: 1rem;
        border-bottom: 1px solid #e5e7eb;
      }
      
      .sidebar-content {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
      }
      
      .main-content {
        flex: 1;
        display: flex;
        flex-direction: column;
      }
      
      .toolbar {
        background: white;
        border-bottom: 1px solid #e5e7eb;
        padding: 0.5rem 1rem;
        display: flex;
        align-items: center;
        gap: 1rem;
      }
      
      .pdf-container {
        flex: 1;
        overflow: auto;
        background: #34495e;
        display: flex;
        justify-content: center;
        align-items: flex-start;
        padding: 2rem;
      }
      
      #pdf-canvas {
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        background: white;
        max-width: 100%;
        height: auto;
      }
      
      .control-button {
        background: #3b82f6;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 0.375rem;
        cursor: pointer;
        font-size: 0.875rem;
      }
      
      .control-button:hover {
        background: #2563eb;
      }
      
      .control-button:disabled {
        background: #9ca3af;
        cursor: not-allowed;
      }
      
      .page-info {
        font-size: 0.875rem;
        color: #6b7280;
      }
      
      .progress-section {
        background: #f9fafb;
        border-radius: 0.5rem;
        padding: 1rem;
        margin-bottom: 1rem;
      }
      
      .progress-bar {
        width: 100%;
        height: 0.5rem;
        background: #e5e7eb;
        border-radius: 0.25rem;
        overflow: hidden;
        margin: 0.5rem 0;
      }
      
      .progress-fill {
        height: 100%;
        background: #10b981;
        transition: width 0.3s ease;
      }
      
      input[type="range"] {
        width: 100%;
        margin: 0.5rem 0;
      }
      
      .zoom-controls {
        display: flex;
        gap: 0.5rem;
        align-items: center;
      }
      
      .loading {
        text-align: center;
        padding: 2rem;
        color: white;
      }
    </style>
  </head>

  <body>
    <div class="pdf-viewer">
      <!-- Sidebar -->
      <div class="sidebar">
        <div class="sidebar-header">
          <h2 class="text-lg font-semibold text-gray-900"><%= @book.title %></h2>
          <% if @book.author.present? %>
            <p class="text-sm text-gray-600">by <%= @book.author %></p>
          <% end %>
          <a href="<%= book_path(@book) %>" class="text-sm text-blue-600 hover:text-blue-800">‚Üê Back to Book</a>
        </div>
        
        <div class="sidebar-content">
          <!-- Progress Section -->
          <div class="progress-section">
            <h3 class="text-sm font-medium text-gray-900 mb-2">Reading Progress</h3>
            <div class="progress-bar">
              <div class="progress-fill" id="reading-progress" style="width: 0%"></div>
            </div>
            <div class="text-sm text-gray-600">
              Page <span id="current-page-display">1</span> of <span id="total-pages-display">-</span>
            </div>
            
            <!-- Page Navigation -->
            <div class="mt-3">
              <label class="block text-sm font-medium text-gray-700 mb-1">Jump to Page:</label>
              <input type="range" id="page-slider" min="1" max="1" value="1" class="w-full">
              <div class="flex justify-between text-xs text-gray-500 mt-1">
                <span>1</span>
                <span id="max-page-label">1</span>
              </div>
            </div>
            
            <!-- Update Progress Button -->
            <button onclick="updateBookProgress()" class="mt-3 w-full bg-green-600 text-white px-3 py-2 rounded text-sm hover:bg-green-700">
              Update Book Progress
            </button>
          </div>
          
          <!-- Navigation -->
          <div class="space-y-2">
            <h3 class="text-sm font-medium text-gray-900 mb-2">Navigation</h3>
            <button onclick="goToPage(1)" class="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded">
              üìñ First Page
            </button>
            <button onclick="goToLastPage()" class="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded">
              üìë Last Page
            </button>
          </div>
        </div>
      </div>
      
      <!-- Main Content -->
      <div class="main-content">
        <!-- Toolbar -->
        <div class="toolbar">
          <button id="prev-page" class="control-button" onclick="previousPage()">
            ‚Üê Previous
          </button>
          <button id="next-page" class="control-button" onclick="nextPage()">
            Next ‚Üí
          </button>
          
          <div class="page-info">
            Page <span id="page-num">1</span> of <span id="page-count">-</span>
          </div>
          
          <div class="zoom-controls">
            <button class="control-button" onclick="zoomOut()">-</button>
            <span id="zoom-level">100%</span>
            <button class="control-button" onclick="zoomIn()">+</button>
            <button class="control-button" onclick="fitToWidth()">Fit Width</button>
          </div>
        </div>
        
        <!-- PDF Container -->
        <div class="pdf-container">
          <div class="loading" id="loading">Loading PDF...</div>
          <canvas id="pdf-canvas" style="display: none;"></canvas>
        </div>
      </div>
    </div>

    <script>
      // PDF.js Configuration
      pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';
      
      let pdfDoc = null;
      let pageNum = 1;
      let pageRendering = false;
      let pageNumPending = null;
      let scale = 1.0;
      const canvas = document.getElementById('pdf-canvas');
      const ctx = canvas.getContext('2d');
      
      // Load PDF
      const pdfUrl = '<%= @book.pdf_file.url %>';
      
      pdfjsLib.getDocument(pdfUrl).promise.then(function(pdfDoc_) {
        pdfDoc = pdfDoc_;
        document.getElementById('page-count').textContent = pdfDoc.numPages;
        document.getElementById('total-pages-display').textContent = pdfDoc.numPages;
        document.getElementById('max-page-label').textContent = pdfDoc.numPages;
        document.getElementById('page-slider').max = pdfDoc.numPages;
        
        // Hide loading
        document.getElementById('loading').style.display = 'none';
        canvas.style.display = 'block';
        
        // Render the first page
        renderPage(pageNum);
        updateProgress();
      }).catch(function(error) {
        console.error('Error loading PDF:', error);
        document.getElementById('loading').innerHTML = 'Error loading PDF. Please try again.';
      });
      
      function renderPage(num) {
        pageRendering = true;
        
        pdfDoc.getPage(num).then(function(page) {
          const viewport = page.getViewport({ scale: scale });
          canvas.height = viewport.height;
          canvas.width = viewport.width;
          
          const renderContext = {
            canvasContext: ctx,
            viewport: viewport
          };
          
          const renderTask = page.render(renderContext);
          
          renderTask.promise.then(function() {
            pageRendering = false;
            
            if (pageNumPending !== null) {
              renderPage(pageNumPending);
              pageNumPending = null;
            }
          });
        });
        
        // Update page counters
        document.getElementById('page-num').textContent = num;
        document.getElementById('current-page-display').textContent = num;
        document.getElementById('page-slider').value = num;
        
        // Update button states
        document.getElementById('prev-page').disabled = (num <= 1);
        document.getElementById('next-page').disabled = (num >= pdfDoc.numPages);
        
        updateProgress();
      }
      
      function queueRenderPage(num) {
        if (pageRendering) {
          pageNumPending = num;
        } else {
          renderPage(num);
        }
      }
      
      function previousPage() {
        if (pageNum <= 1) return;
        pageNum--;
        queueRenderPage(pageNum);
      }
      
      function nextPage() {
        if (pageNum >= pdfDoc.numPages) return;
        pageNum++;
        queueRenderPage(pageNum);
      }
      
      function goToPage(num) {
        if (num < 1 || num > pdfDoc.numPages) return;
        pageNum = num;
        queueRenderPage(pageNum);
      }
      
      function goToLastPage() {
        pageNum = pdfDoc.numPages;
        queueRenderPage(pageNum);
      }
      
      function zoomIn() {
        scale *= 1.2;
        document.getElementById('zoom-level').textContent = Math.round(scale * 100) + '%';
        queueRenderPage(pageNum);
      }
      
      function zoomOut() {
        scale /= 1.2;
        document.getElementById('zoom-level').textContent = Math.round(scale * 100) + '%';
        queueRenderPage(pageNum);
      }
      
      function fitToWidth() {
        if (!pdfDoc) return;
        
        pdfDoc.getPage(pageNum).then(function(page) {
          const container = document.querySelector('.pdf-container');
          const containerWidth = container.clientWidth - 80; // Account for padding
          const viewport = page.getViewport({ scale: 1.0 });
          scale = containerWidth / viewport.width;
          document.getElementById('zoom-level').textContent = Math.round(scale * 100) + '%';
          queueRenderPage(pageNum);
        });
      }
      
      function updateProgress() {
        if (!pdfDoc) return;
        
        const progress = (pageNum / pdfDoc.numPages) * 100;
        document.getElementById('reading-progress').style.width = progress + '%';
      }
      
      function updateBookProgress() {
        const button = event.target;
        const originalText = button.textContent;
        
        button.textContent = 'Updating...';
        button.disabled = true;
        
        fetch('<%= update_progress_book_path(@book) %>', {
          method: 'PATCH',
          headers: {
            'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ current_page: pageNum })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            button.textContent = 'Updated!';
            button.classList.remove('bg-green-600');
            button.classList.add('bg-green-700');
            console.log('Progress updated successfully:', data);
            
            setTimeout(() => {
              button.textContent = originalText;
              button.classList.remove('bg-green-700');
              button.classList.add('bg-green-600');
              button.disabled = false;
            }, 2000);
          } else {
            button.textContent = 'Error!';
            button.classList.remove('bg-green-600');
            button.classList.add('bg-red-600');
            console.error('Failed to update progress:', data.error);
            
            setTimeout(() => {
              button.textContent = originalText;
              button.classList.remove('bg-red-600');
              button.classList.add('bg-green-600');
              button.disabled = false;
            }, 3000);
          }
        })
        .catch(error => {
          button.textContent = 'Error!';
          button.classList.remove('bg-green-600');
          button.classList.add('bg-red-600');
          console.error('Network error:', error);
          
          setTimeout(() => {
            button.textContent = originalText;
            button.classList.remove('bg-red-600');
            button.classList.add('bg-green-600');
            button.disabled = false;
          }, 3000);
        });
      }
      
      // Page slider event
      document.getElementById('page-slider').addEventListener('input', function(e) {
        goToPage(parseInt(e.target.value));
      });
      
      // Keyboard navigation
      document.addEventListener('keydown', function(e) {
        switch(e.code) {
          case 'ArrowLeft':
            previousPage();
            break;
          case 'ArrowRight':
            nextPage();
            break;
          case 'Home':
            goToPage(1);
            break;
          case 'End':
            goToLastPage();
            break;
        }
      });
      
      // Initialize fit to width on load
      window.addEventListener('load', function() {
        setTimeout(fitToWidth, 1000);
      });
    </script>
  </body>
</html>
